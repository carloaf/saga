#!/bin/bash

# Script de Sincroniza√ß√£o SAGA - Branches e Deploy
# Sistema de Agendamento e Gest√£o de Arranchamento

set -e  # Para se algum comando falhar

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para log colorido
log_info() { echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"; }
log_success() { echo -e "${GREEN}‚úÖ $1${NC}"; }
log_warning() { echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"; }
log_error() { echo -e "${RED}‚ùå $1${NC}"; }

# Fun√ß√£o para verificar se h√° mudan√ßas n√£o commitadas
check_uncommitted_changes() {
    if [[ -n $(git status --porcelain) ]]; then
        log_warning "H√° mudan√ßas n√£o commitadas!"
        echo ""
        git status --short
        echo ""
        read -p "Deseja fazer commit dessas mudan√ßas? (y/n): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            read -p "üìù Digite a mensagem do commit: " commit_message
            if [[ -n "$commit_message" ]]; then
                git add .
                git commit -m "$commit_message"
                log_success "Commit realizado: $commit_message"
            else
                log_error "Mensagem de commit n√£o pode estar vazia!"
                exit 1
            fi
        else
            log_error "Sincroniza√ß√£o cancelada. Fa√ßa commit das mudan√ßas primeiro."
            exit 1
        fi
    fi
}

# Fun√ß√£o para sincronizar branches
sync_branches() {
    local current_branch=$(git branch --show-current)
    
    log_info "Branch atual: $current_branch"
    
    # Se estiver na dev, fazer merge para main
    if [ "$current_branch" = "dev" ]; then
        log_info "Sincronizando dev ‚Üí main..."
        
        # Verificar se dev est√° atualizada com remoto
        git fetch origin dev
        if [[ $(git rev-parse HEAD) != $(git rev-parse origin/dev) ]]; then
            log_info "Fazendo pull da branch dev..."
            git pull origin dev
        fi
        
        # Mudar para main e fazer merge
        git checkout main
        log_info "Fazendo merge da dev para main..."
        git merge dev --no-ff -m "merge: Sincroniza√ß√£o dev ‚Üí main"
        
    # Se estiver na main, sincronizar com dev
    elif [ "$current_branch" = "main" ]; then
        log_info "Sincronizando main ‚Üí dev..."
        
        # Verificar se main est√° atualizada com remoto
        git fetch origin main
        if [[ $(git rev-parse HEAD) != $(git rev-parse origin/main) ]]; then
            log_info "Fazendo pull da branch main..."
            git pull origin main
        fi
        
        # Mudar para dev e fazer merge
        git checkout dev
        log_info "Fazendo merge da main para dev..."
        git merge main --ff-only
        
        # Voltar para main
        git checkout main
        
    else
        log_error "Branch atual ($current_branch) n√£o √© dev nem main!"
        log_info "Mudando para branch main..."
        git checkout main
    fi
}

# Fun√ß√£o para fazer push das duas branches
push_branches() {
    log_info "Enviando branches para servidor remoto..."
    
    # Push da main
    log_info "üì§ Enviando branch main..."
    git push origin main
    log_success "Branch main enviada com sucesso!"
    
    # Push da dev
    log_info "üì§ Enviando branch dev..."
    git checkout dev
    git push origin dev
    log_success "Branch dev enviada com sucesso!"
    
    # Voltar para main
    git checkout main
}

# Fun√ß√£o para mostrar status final
show_final_status() {
    echo ""
    log_success "üéâ Sincroniza√ß√£o conclu√≠da com sucesso!"
    echo ""
    echo "üìä Status final das branches:"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    
    # Status da main
    git checkout main > /dev/null 2>&1
    local main_commit=$(git log --oneline -1)
    echo "üöÄ main:  $main_commit"
    
    # Status da dev
    git checkout dev > /dev/null 2>&1
    local dev_commit=$(git log --oneline -1)
    echo "üõ†Ô∏è  dev:   $dev_commit"
    
    git checkout main > /dev/null 2>&1
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    
    # Verificar se branches est√£o sincronizadas
    if [ "$main_commit" = "$dev_commit" ]; then
        log_success "Branches est√£o perfeitamente sincronizadas!"
    else
        log_warning "Branches t√™m commits diferentes (isso pode ser normal)"
    fi
    
    echo ""
    log_info "URLs do reposit√≥rio:"
    echo "  üåê GitHub: https://github.com/carloaf/saga"
    echo "  üîó Clone:  git clone https://github.com/carloaf/saga.git"
    echo ""
    log_info "Pr√≥ximos passos:"
    echo "  ‚Ä¢ Para desenvolvimento: git checkout dev"
    echo "  ‚Ä¢ Para deploy: ./deploy.sh"
    echo "  ‚Ä¢ Para debug: ./debug-login.sh"
}

# Fun√ß√£o principal
main() {
    echo "üîÑ SAGA - Script de Sincroniza√ß√£o de Branches"
    echo "=============================================="
    echo ""
    
    # Verificar se estamos em um reposit√≥rio git
    if ! git rev-parse --git-dir > /dev/null 2>&1; then
        log_error "Este n√£o √© um reposit√≥rio Git!"
        exit 1
    fi
    
    # Configurar pull strategy se n√£o estiver configurada
    if ! git config pull.rebase > /dev/null 2>&1; then
        log_info "Configurando estrat√©gia de pull..."
        git config pull.rebase false
    fi
    
    # Verificar conectividade com remoto
    log_info "Verificando conectividade com reposit√≥rio remoto..."
    if ! git ls-remote origin > /dev/null 2>&1; then
        log_error "N√£o foi poss√≠vel conectar ao reposit√≥rio remoto!"
        exit 1
    fi
    
    # Verificar mudan√ßas n√£o commitadas
    check_uncommitted_changes
    
    # Fazer fetch de todas as branches
    log_info "Atualizando refer√™ncias remotas..."
    git fetch origin
    
    # Sincronizar branches
    sync_branches
    
    # Fazer push das branches
    push_branches
    
    # Mostrar status final
    show_final_status
}

# Verificar se o script foi chamado com par√¢metros
if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
    echo "üìñ SAGA - Script de Sincroniza√ß√£o de Branches"
    echo ""
    echo "Este script sincroniza automaticamente as branches dev e main,"
    echo "fazendo merge entre elas e enviando para o reposit√≥rio remoto."
    echo ""
    echo "Uso: ./sync-branches.sh"
    echo ""
    echo "O script far√°:"
    echo "  1. Verificar mudan√ßas n√£o commitadas"
    echo "  2. Sincronizar branches dev ‚Üî main"
    echo "  3. Fazer push de ambas as branches"
    echo "  4. Mostrar status final"
    echo ""
    echo "Op√ß√µes:"
    echo "  -h, --help    Mostra esta ajuda"
    echo ""
    exit 0
fi

# Executar fun√ß√£o principal
main "$@"
